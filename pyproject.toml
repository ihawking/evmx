[tool.poetry]
name = "EVMx"
version = "0.1.0"
description = "A Crypto Gateway."
authors = ["Hawking"]
readme = "README.md"
package-mode = false

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["evmx/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

# ==== mypy ====
[tool.mypy]
python_version = "3.12.4"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]
# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    # "ARG", # Unused function argument
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    # "NPY",
    # "AIR",
    "PERF",
    # "FURB",
    # "LOG",
    "RUF"
]
ignore = [
    "I", # 禁用
    "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM102", # sometimes it's better to nest
    "UP038", # Checks for uses of isinstance/issubclass that take a tuple
    "PLR0913", # 限制参数为5个
    "E402", # import 必须在顶部
    "BLE001", # 异常捕获
    "RET505", # return后的else是不必要的，但本项目以代码逻辑清晰优先
    "SIM108",
    "E501", # Line too long
    "PGH004", # noqa
    # of types for comparison.
    # Deactivated because it can make the code slow:
    # https://github.com/astral-sh/ruff/issues/7871
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true

[tool.poetry.dependencies]
python = "3.12.4"
web3 = "6.20.0"
redis = "5.0.7"
hiredis = "2.3.2"
cryptography = "41.0.7"
ipaddress = "1.0.23"
loguru = "0.7.2"
requests = "2.31.0"
arrow = "1.3.0"
ulid-py = "1.1.0"
whitenoise = "6.7.0"
argon2-cffi = "23.1.0"
# Celery
celery = "5.4.0"
flower = "2.0.1"
celery-redbeat = "2.2.0"
django-celery-results = "2.5.1"
# Django
django = "4.2.14"
django-extensions = "3.2.3"
django-environ = "0.11.2"
django-model-utils = "4.5.1"
django-unfold = "0.37.0"
django-simple-history = "3.7.0"
djangorestframework = "3.14.0"
django-redis = "5.4.0"
django-guardian = "2.4.0"

[tool.poetry.group.local.dependencies]
watchfiles = "0.22.0"
werkzeug = { extras = ["watchdog"], version = "3.0.3" }
ipdb = "0.13.13"
psycopg = { extras = ["binary"], version = "3.2.1" }
# Testing
mypy = "1.10.1"
django-stubs = { extras = ["compatible-mypy"], version = "5.0.2" }
pytest = "8.2.2"
pytest-sugar = "1.0.0"
djangorestframework-stubs = { extras = ["compatible-mypy"], version = "3.15.0" }
#Documents
sphinx = "7.3.7"
sphinx-autobuild = "2024.4.16"
# Code quality
ruff = "0.5.1"
coverage = "7.3.2"
djlint = "1.34.1"
pylint-django = "2.5.5"
pylint-celery = "0.3"
pre-commit = "3.7.1"
# Django
factory-boy = "3.3.0"
django-debug-toolbar = "4.4.5"
django-coverage-plugin = "3.1.0"
pytest-django = "4.8.0"

[tool.poetry.group.production]
optional = true
[tool.poetry.group.production.dependencies]
gunicorn = "21.2.0"
psycopg = { extras = ["c"], version = "3.2.1" }
